(function(){function c(a){a=a||{};if(!a.endpoint)throw"[warp] [ERROR] no endpoint defined!";this.channel=new c.Channel(a);this.params=a.params;this.ready=!1;this.buffer=[];var b=this;b.debug=a.debug?a.debug:!1;b.reconnectInterval=a.reconnectInterval?a.reconnectInterval:1E3;var d=new ReconnectingWebSocket("ws://"+(a.endpoint+"/socket"),null,{debug:b.debug,reconnectInterval:b.reconnectInterval});d.onopen=function(a){if(b.debug){var c={};c.type=a.type;c.timestamp=a.timeStamp;console.info("[warp] open: "+
JSON.stringify(c))}(a=b.channel.channel)&&0<Object.keys(a).length&&Object.keys(a).forEach(function(a){b._subscribe(a)});b.ready=!0;b._sendBuffer()};d.onclose=function(a){if(b.debug){var c={};c.type=a.type;c.timestamp=a.timeStamp;console.info("[warp]: "+JSON.stringify(c))}b.ready=!1};d.onmessage=function(a){a=JSON.parse(a.data);b.debug&&console.debug("[warp] receive message: "+JSON.stringify(a));a.channel&&b.channel.get(a.channel)&&b.channel.get(a.channel)(a.msg)};d.onerror=function(a){b.debug&&(console.error("[warp] ERROR"),
console.error(a))};b._sendJSON=function(a){b.debug&&console.debug("[warp] send message: "+JSON.stringify(a));d.send(JSON.stringify(a))};b._sendBuffer=function(){b.buffer.forEach(function(a,c){setTimeout(function(){b._sendJSON(a)},100)});b.buffer=[]};b._send=function(a,c){var d={};d.channel=a;d.timestamp=Date.now();this.params&&(d.params=this.params);d.msg=c;b.ready?b._sendJSON(d):b.buffer.push(d)};b._subscribe=function(a){var c={};c.subscribe=a;b._sendJSON(c)};b._close=function(){d.close(1E3)}}c.prototype.subscribe=
function(a,b){this.channel.add(a,b)};c.prototype.unsubscribe=function(a){this.channel.remove(a)};c.prototype.beam=function(a,b){this._send(a,b)};c.prototype.allChannels=function(){return this.channel.all()};c.prototype.close=function(){this._close()};this.Warp=c}).call(this);
(function(){function c(a){a=a||{};this.debug=a.debug?a.debug:!1;this.channel={}}c.prototype.add=function(a,b){this.channel[a]=b;this.debug&&console.info("[warp]: subscribed to channel "+a)};c.prototype.get=function(a){return this.channel[a]};c.prototype.remove=function(a){delete this.channel[a]};c.prototype.all=function(){return Object.keys(this.channel)};Warp.Channel=c}).call(this);
